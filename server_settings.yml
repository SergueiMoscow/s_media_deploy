# Начальный скрипт создания конфигурации
# checked ok
- hosts: no_root
  become: yes
  vars_files:
    - s_media_secrets.yaml

  vars:
    postgresql_version: 14
  tasks:

  - name: Установить необходимые пакеты
    apt:
      name:
        - python3-pip
        - python3-dev
        - libpq-dev
        - postgresql
        - postgresql-contrib
        - nginx
        - curl
        - python3-poetry
        - libpq-dev
      state: present
      update_cache: yes

  - name: Установка psycopg2, net-tools, mc
    apt:
      name:
        - python3-psycopg2
        - net-tools
        - mc
      state: present

  - name: Изменить метод аутентификации на trust для пользователя postgres
    lineinfile:
      path: /etc/postgresql/14/main/pg_hba.conf
      regexp: '^local\s+all\s+postgres\s+peer$'
      line: 'local   all    postgres                     trust'
    notify: restart postgresql

  - name: Изменить метод аутентификации на md5 для всех
    lineinfile:
      path: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
      regexp: '^local\s+all\s+all\s+peer$'
      line: 'local   all    all                     md5'
    notify: restart postgresql

  - name: Configure PostgreSQL. Set listen_addresses.
    lineinfile:
      path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
      regexp: 'listen_addresses ='
      line: "listen_addresses = '*'"
      state: present
    notify: restart postgresql

  - name: restart postgresql
    service:
      name: postgresql
      state: restarted

  - name: Create a new database with name "{{ db_name1 }}" and specific encoding and locale # settings
    community.postgresql.postgresql_db:
      name: "{{ db_name1 }}"
      encoding: UTF-8
      template: template0
    notify: restart postgresql

  - name: Create a new database with name "{{ db_name2 }}" and specific encoding and locale # settings
    community.postgresql.postgresql_db:
      name: "{{ db_name2 }}"
      encoding: UTF-8
      template: template0

  - name: Настройка пользователя базы данных PostgreSQL
    community.postgresql.postgresql_user:
      db: "postgres"
      name: "{{ db_user }}"
      password: "{{ db_password }}"
      role_attr_flags: SUPERUSER

  - name: GRANT ALL PRIVILEGES ON DATABASE {{ db_name1 }} TO {{ db_user }}
    community.postgresql.postgresql_privs:
      db: postgres
      privs: ALL
      type: database
      obj: "{{ db_name1 }}"
      role: "{{ db_user }}"

  - name: GRANT ALL PRIVILEGES ON DATABASE {{ db_name2 }} TO {{ db_user }}
    community.postgresql.postgresql_privs:
      db: postgres
      privs: ALL
      type: database
      obj: "{{ db_name2 }}"
      role: "{{ db_user }}"

  - name: Add remote access "{{ db_user }}" to "{{ db_name1 }}"
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/14/main/pg_hba.conf
      contype: host
      users: "{{ db_user }}"
      databases: "{{ db_name1 }}"
      method: md5
      source: 0.0.0.0/0
      keep_comments_at_rules: true
      comment: "added with ansible"

  - name: Add remote access "{{ db_user }}" to "{{ db_name2 }}"
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/14/main/pg_hba.conf
      contype: host
      users: "{{ db_user }}"
      databases: "{{ db_name2 }}"
      method: md5
      source: 0.0.0.0/0
      keep_comments_at_rules: true
      comment: "added with ansible"
    notify: restart postgresql

  - name: Check PostgreSQL schema "{{ db_schema1 }}" of "{{ db_name1 }}"
    postgresql_schema:
      db: "{{ db_name1 }}"
      name: "{{ db_schema1 }}"
      owner: "{{ db_user }}"

  - name: Check PostgreSQL schema "{{ db_schema2 }}" of "{{ db_name2 }}"
    postgresql_schema:
      db: "{{ db_name2 }}"
      name: "{{ db_schema2 }}"
      owner: "{{ db_user }}"

  handlers:
  - name: restart postgresql
    service:
      name: postgresql
      state: restarted

